* Configurations
** Init packages 
*** Init packages
#+BEGIN_SRC emacs-lisp
    ;;initialize all the packages
    (setq inhibit-startup-message t)

  (use-package exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns x))
  :config
  (setq exec-path-from-shell-variables '("PATH" "GOPATH" "GO111MODULE"))
  (exec-path-from-shell-initialize))  		
  (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
*** ORG Mode
#+BEGIN_SRC emacs-lisp
  ;;use melpa as my package manager			   
  (require 'org)						      
  ;;enable orgmode bullets					      
  (use-package org-bullets					      
    :ensure t							      
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))) 

  ;; org mode templates ;;use <el to invoke this template;;TODO: not working
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
                              '("el" "#+BEGIN_SRC emacs-lisp \n?\n#+END_SRC"))

  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
*** ORG Superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
  :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+END_SRC
*** remove toolbars and menus, disable bell, scrollbars
#+BEGIN_SRC emacs-lisp
  ;;Remove the toolbar and menubar
  (tool-bar-mode -1)		 
  (menu-bar-mode -1)
  ;;disable ring bell function
  (setq ring-bell-function 'ignore)
  ;;scrolling os too much, lets reduce it to scroll line by line
  (setq scroll-conservatively 100)
  (scroll-bar-mode -1)

  ;;Inplace scrolls
  (global-set-key (kbd "C-s-p") 'scroll-down-line)
  (global-set-key (kbd "C-s-n") 'scroll-up-line)
  (global-set-key (kbd "C-s-<up>") 'scroll-down-line)
  (global-set-key (kbd "C-s-<down>") 'scroll-up-line)


  ;;(setq-default cursor-type '(box . 6))
  (when window-system (global-hl-line-mode t))
  ;;disable backup
  (setq backup-inhibited t)
  ;;disable auto save
  (setq auto-save-default nil)

  (global-set-key "\M-n"  (lambda () (interactive) (scroll-up 2)))
  (global-set-key "\M-p"  (lambda () (interactive) (scroll-down 2)))

  (global-set-key (kbd "M-<down>")  (lambda () (interactive) (scroll-up 2)))
  (global-set-key (kbd "M-<up>")  (lambda () (interactive) (scroll-down 2)))
  (setq-default display-line-numbers-width 2)
  (setq scroll-margin 2)
  ;;add this is after load hook in init.el
  (set-face-foreground 'line-number "#808080")
#+END_SRC

*** mode icons
#+BEGIN_SRC emacs-lisp
    (use-package mode-icons
    :ensure t)
  (mode-icons-mode)
#+END_SRC
** IDO
*** IDO
#+BEGIN_SRC emacs-lisp                             
  ;;this allow you to browse through files on C-x b
  ;;  (setq ido-enable-flex-matching nil)            
  ;;  (setq ido-create-new-buffer 'always)           
  ;;  (setq ido-everywhere t)                        
  ;;  (ido-mode 1)                                   

#+END_SRC

*** IDO Vertical mode
#+BEGIN_SRC emacs-lisp
   ;;NOTE: Check alternates											           
   ;;install ido vertical to show the files in a vertical format, this needs to be installed as its not part of emacs     
  ;; (use-package ido-vertical-mode										       	   
  ;;  :ensure t													       	   
  ;;  :init														   
  ;;  (ido-vertical-mode 1)												   
  ;;  (setq ido-vertical-define-keys 'C-n-and-C-p-only));;this allows us to traverse through files using up and down chords
  ;;(global-set-key (kbd "C-x C-b") 'ido-switch-buffer);;chnage the default key since the C-x b is bind to ibuffer         
#+END_SRC
** IBuffer opening and expert killing
*** display ibuffer for opening buffer window
#+BEGIN_SRC emacs-lisp												       
  ;;open the buffer list in a new window and dont use ido for it, use ibuffer, the window opens opn C-x b	       
  (global-set-key (kbd "C-x b") 'ibuffer)
  ;;dont ask for confirmation everytime i kill a buffer in the ibuffer buffer
  (setq ibuffer-expert t)					       
#+END_SRC													       
*** Kill buffer without asking for buffer name
#+BEGIN_SRC emacs-lisp						  
  ;; on C-x K kill the buffer dont ask from list of buffer name	  
  (defun kill-curr-buffer()					  
    (interactive)						  
    (kill-buffer (current-buffer)))				  
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)		  
#+END_SRC
*** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
** Which Key
#+BEGIN_SRC emacs-lisp
  ;;show prompt after C-x
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
    (which-key-setup-side-window-right-bottom)
#+END_SRC
** Avy and jump char
*** Avy
#+BEGIN_SRC emacs-lisp
  ;;enables you to search any character
  (use-package avy
    :ensure t
    :bind
    ("C-;" . avy-goto-word-2))
#+END_SRC
*** Ace-Jump
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Custom config open and reload functions
#+BEGIN_SRC emacs-lisp
  ;;reload config file on a shortcut
  (defun config-open()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c o") 'config-open)

  ;;config reload
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/init.el")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Beacon highlight the line with cusrosor on buffer switch
#+BEGIN_SRC emacs-lisp
  ;;show a beacon where the cusrsor is present
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** Rainbow
#+BEGIN_SRC emacs-lisp
  ;;this highlights the background of a hex code color code
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook  'rainbow-mode))
#+END_SRC
** Switch Windows Settings
*** Switch Window
#+BEGIN_SRC emacs-lisp
  ;;window navigation- switch window
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 1);;this shows window labels on C-x o when the number of windows is greater than 3; keeping it 1 to allow resize shortcuts
    :bind
    ([remap other-window] . switch-window))    ;;remap the other window function to switch window
#+END_SRC
*** Split Window function and shortcuts
#+BEGIN_SRC emacs-lisp
  ;; custom function : when I split the window, the cursor should go to the newly created window
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  ;; custom function : when I split the window, the cursor should go to the newly created window
  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
*** Navigate through open buffers
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c k") 'windmove-up)
    (global-set-key (kbd "C-C j") 'windmove-down)
    (global-set-key (kbd "C-c h") 'windmove-left)
    (global-set-key (kbd "C-c l") 'windmove-right)
    (global-set-key (kbd "C-x h") 'previous-buffer)
    (global-set-key (kbd "C-x l") 'next-buffer)
#+END_SRC
*** Resize window
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s-j") 'shrink-window)
  (global-set-key (kbd "C-s-k") 'enlarge-window)
  (global-set-key (kbd "C-s-h") 'shrink-window-horizontally)
  (global-set-key (kbd "C-s-l") 'enlarge-window-horizontally)
#+END_SRC
** Search, Navigation using smex
*** smex
#+BEGIN_SRC emacs-lisp
  ;;install smex, this allow us with option-x to view various command options
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Text Editing & Parsing settings, hungry delete
*** Parse through words in case of camel case
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** Kill whole word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
*** Smart hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package smart-hungry-delete
    :ensure t
    :init (global-set-key (kbd "C-<backspace>") 'smart-hungry-delete-backward-char))
#+END_SRC
*** Show line number in window
#+BEGIN_SRC emacs-lisp
  ;;(use-package hlinum
  ;; :ensure t)
  ;;(hlinum-activate)
  ;;(global-linum-mode t)
  ;;(setq linum-format "%3d \u2502")
  ;;(setq display-line-numbers 'relative)
  (setq-default display-line-numbers 'relative)

  (fringe-mode '(15 . 10))
  (defun custom-linum-background  ()
    (set-face-background 'line-number (color-darken-name (face-attribute 'default :background) 2)))
  ;;    (add-to-list 'default-frame-alist 'my-set-background-color)
  ;;(add-hook 'after-make-frame-functions (set-face-background 'line-number (color-darken-name (face-attribute 'default :background) 2)))
  (add-hook 'prog-mode-hook 'custom-linum-background)
  (setq left-fringe-width 20)
  ;;(set-window-fringes nil 15 10)
#+END_SRC
*** Replace yes and no with y or n
#+BEGIN_SRC emacs-lisp
  ;;ad alias for yes or no
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Copy whole line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line()
    (interactive)
    (save-excursion
      (kill-new (buffer-substring (point-at-bol) (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)

  ;; C-c w e copy rest of the line
  (defun copy-line-to-endofline()
    (interactive)
    (save-excursion
      (kill-new (buffer-substring (point) (point-at-eol)))))
  (global-set-key (kbd "C-c w e") 'copy-line-to-endofline)
#+END_SRC

*** kill ring- multiple
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
*** mutiple cursors (highlight the selected text on the page and edit all)
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind ("C-c q" . 'mc/mark-all-like-this))
  (global-set-key (kbd "C-S-c") 'mc/edit-lines)
#+END_SRC
*** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
*** pretty symbols
#+BEGIN_SRC emacs-lisp
  ;;chnages words to symbols like lambda, >= etc
  (use-package pretty-mode
    :ensure t
    :config (global-pretty-mode t))
#+END_SRC
*** replace the selection on select+type
#+BEGIN_SRC emacs-lisp
  ;;overwrite the selected values
  (delete-selection-mode 1)

#+END_SRC
*** Undo tree
#+BEGIN_SRC emacs-lisp
    (use-package undo-tree
  :ensure t)
  (global-undo-tree-mode)
#+END_SRC
** Programming Basic Settings
*** Electric Pair
#+BEGIN_SRC emacs-lisp
  ;;autocomplete the parentheses and others
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              (?\' . ?\')
                              (?\{ . ?\})
                              ))
  (electric-pair-mode t)
#+END_SRC
*** sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
*** rainbow delimiters
#+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      (show-paren-mode 1))
  (setq show-paren-style 'parenthesis)
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+END_SRC
*** Autocomplete
#+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :config
        (setq company-idle-delay 0)
        (setq company-minimum-prefix-length 1)
        ;;(setq lsp-completion-provider :capf)
        :init
        (add-hook 'after-init-hook 'global-company-mode))
  (setq company-begin-commands '(self-insert-command))

  ;;show companyquick help for symbols on popup
  (use-package company-quickhelp
    :ensure t)
  (company-quickhelp-mode)
#+END_SRC
*** yasnippet
#+BEGIN_SRC emacs-lisp
  ;;yasnippet provides the functionality
  ;;yasnippet snippet provides the snippets
   (use-package yasnippet
     :ensure t
     :config
     (use-package yasnippet-snippets
       :ensure t)
     (yas-reload-all)
     (yas-global-mode))
  ;;add custom snippets to /snippets/<prog.lang.name>-mode/ dir
#+END_SRC
*** Comment
#+BEGIN_SRC emacs-lisp
  ;; Toggle Comment Uncomment line
  (global-set-key (kbd "C-c .") 'comment-line)
#+END_SRC
*** Indentation highlighting
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t)
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-responsive 'stack)
  (setq highlight-indent-guides-delay 0)

  (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  (set-face-background 'highlight-indent-guides-even-face "dimgray")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgray")

  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-auto-character-face-perc 13)
#+END_SRC
*** IMenu
#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :ensure t
    :bind (("C-." . imenu-list-smart-toggle))
    :config
    (setq imenu-list-focus-after-activation t
          imenu-list-auto-resize nil))
#+END_SRC
*** highlight parenthesis
#+BEGIN_SRC emacs-lisp
  ;; (use-package highlight-parentheses
  ;; :ensure t)
  ;; (add-hook 'prog-mode-hook #'highlight-parentheses-mode)
  ;; (highlight-parentheses-mode)
  ;; (show-paren-mode 1)
#+END_SRC
** Modeline
*** Show line numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
*** smart mode line
#+BEGIN_SRC emacs-lisp
  (setq sml/no-confirm-load-theme t)
  ;;(use-package smart-mode-line
  ;;  :ensure t
  ;;  :init (setq sml/theme 'dark))
  ;; TODO: use package dimisnish to remove minor modes fdeom the mode line
  ;;(use-package powerline
  ;;  :ensure t)
  ;;(powerline-center-evil-theme)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
    (defun my/dashboard-banner ()
      """Set a dashboard banner including information on package initialization
          time and garbage collections."""
          (setq dashboard-banner-logo-title
                (format "Emacs ready in %.2f seconds with %d garbage collections."
                        (float-time (time-subtract after-init-time before-init-time)) gcs-done)))
    (use-package dashboard
      :init
      (add-hook 'after-init-hook 'dashboard-refresh-buffer)
      (add-hook 'dashboard-mode-hook 'my/dashboard-banner)
      :config
      (dashboard-setup-startup-hook))

    (setq dashboard-startup-banner "~/src/saitamaokemacs.png")
    (setq dashboard-banner-logo-title "Welcome Master")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts t)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-init-info t)
    ;; (setq dashboard-items '((bookmarks . 10)))
#+END_SRC
** dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind ("C-M-<SPC>" . 'dmenu))
#+END_SRC
** symon
#+BEGIN_SRC emacs-lisp
  ;;system monitoring
  ;;(use-package symon
  ;;  :ensure t
  ;;  :bind
  ;;  ("s-h" . symon-mode))
#+END_SRC
** IVY Swiper and Counsel(Add this at the end of file)
   #+BEGIN_SRC emacs-lisp
       ;;ivy is use as a replacement for ido and required for swiper
     (use-package ivy
       :ensure t
       :init (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       )
     ;;height of ivy window
     (setq ivy-height 35)
     ;;use ivy to switch buffers in the the mini buffer
     ;;(global-set-key (kbd "C-x C-b") 'ivy-switch-buffer);;chnage the default key since the C-x b is bind to ibuffer

     ;;swiper: this provides a better search functionality, dependent on ivy package
     ;;use swiper for searching C-s
     (use-package swiper
       :ensure t
       :bind("C-s" . 'swiper)
       )
     ;;use counsel for command fuzzy search
     (use-package counsel
       :ensure t
       :init (counsel-mode 1))
     ;;add this at the end of file; else M-x bindings gets overidden
     (global-set-key (kbd "M-x") 'counsel-M-x)
   #+END_SRC
** Cassandra
#+BEGIN_SRC emacs-lisp
  ;;Cassandra Plugin
  (use-package cql-mode
    :ensure t)
  ;;Enable go-mode only for .go file extensions
  (add-to-list 'auto-mode-alist '("\\.cql\\'" . cql-mode))
#+END_SRC
** Scroll Functions
#+BEGIN_SRC emacs-lisp
  ;;scroll in place without moving cursor
  (defun kb-scroll-up-hold-cursor ()
    "Scroll up one position in file."
    (interactive)
    (scroll-up-command 1))

  (defun kb-scroll-down-hold-cursor ()
    "Scroll down one position in file."
    (interactive)
    (scroll-up-command -1))

  ;;use these functions if you want to move the cusor with the scroll
  (defun kb-scroll-up ()
    "Scroll up one position in file, move cursor with the scroll."
    (interactive)
    (scroll-up-command -1)
    (forward-line -1))

  (defun kb-scroll-down ()
    "Scroll down one position in file, move cursor with the scroll."
    (interactive)
    (scroll-up-command 1)
    (forward-line 1))

  (bind-key "M-s-<up>"  'kb-scroll-up-hold-cursor)
  (bind-key "M-s-<down>"  'kb-scroll-down-hold-cursor)
#+END_SRC
** Smart Tabs
#+BEGIN_SRC emacs-lisp
  (use-package smart-tabs-mode
    :ensure t
    :config
    (setq indent-tab-mode t))
#+END_SRC
** move the file backups to a different location
#+BEGIN_SRC emacs-lisp
  ;;Save backup file at a different location
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )

#+END_SRC
** Display File name at the top
#+BEGIN_SRC emacs-lisp
  ;;Display file path in the title bar
  (setq frame-title-format
        '(:eval
          (if buffer-file-name
              (replace-regexp-in-string
               "\\\\" "/"
               (replace-regexp-in-string
                (regexp-quote (getenv "HOME")) "~"
                (convert-standard-filename buffer-file-name)))
            (buffer-name))))
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (add-to-list 'tramp-remote-path "/home/kartik/src/go/bin")
  ;;(add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (let ((process-environment tramp-remote-process-environment))
    (setenv "ENV" "$HOME/.profile")
    (setq tramp-remote-process-environment process-environment))
#+END_SRC
** LSP
*** LSP mode(enabled for GO mode)
#+BEGIN_SRC emacs-lisp
      ;;lsp go mode

      ;;(add-to-list 'auto-mode-alist '("\\.go\\'" . 'go-mode))
    ;;(add-to-list 'auto-mode-alist '("\\.go\\'" . 'go-mode))
 ;; (setq company-lsp-enable-snippet t)
  (setq-default lsp-headerline-breadcrumb-enable t)
  (setq lsp-enable-symbol-highlighting t)
  ;;(setq lsp-completion-provider :none)
 ;; (setq-default lsp-completion-enable t)
 ;; (setq-default lsp-completion-enable-additional-text-edit t)
 ;; (setq-default lsp-completion-provider :capf)
  (setq-default lsp-completion-show-detail t)
  (setq-default lsp-completion-show-kind t)
  (setq-default lsp-lens-enable t)
  (setq-default lsp-ui-sideline-enable t)
  (setq-default lsp-ui-sideline-show-code-actions t)
  (setq-default lsp-ui-sideline-enable t)
  (setq-default lsp-ui-sideline-show-hover nil)
  (setq-default lsp-eldoc-enable-hover t)
  (setq-default lsp-modeline-diagnostics-enable t)
  (setq-default lsp-enable-semantic-highlighting nil)
  (setq-default lsp-enable-snippet t)

  (setq-default lsp-lens-enable t)
  (setq-default lsp-signature-auto-activate t)
  (setq-default lsp-signature-doc-lines 1)
  (setq-default lsp-signature-render-documentation nil)
  (setq-default lsp-lens-place-position 'above-line)
  (setq-default lsp-modeline-workspace-status-enable t)
  ;;(set-face-attribute 'lsp-face-highlight-textual nil
  ;;:background "#474747")
  (with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))
  (setq-default lsp-ui-doc-position 'right)
  (setq-default lsp-eldoc-render-all nil)
  (setq-default lsp-modeline-code-actions-enable t)
#+END_SRC
*** LSP Ivy
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
*** LSP UI
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t)
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  (setq lsp-ui-sideline-show-code-actions t)
  (global-set-key (kbd "C-c a") 'lsp-ui-sideline-apply-code-actions)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-max-height 20)
  (setq lsp-ui-peek-enable t)
  (setq lsp-ui-peek-show-directory t)
  (setq lsp-ui-imenu-window-width 40)
  (global-set-key (kbd "C-?") 'lsp-ui-imenu)
  (setq-default lsp-enable-symbol-highlighting t)
#+END_SRC
** dap mode for debugging
#+BEGIN_SRC emacs-lisp

  (use-package dap-mode
    :ensure t
    :commands dap-mode
    :hook (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra)))
    :config
    (dap-mode 1)
    (require 'dap-ui)
    (dap-ui-mode 1))
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  ;; The modes below are optional
  (dap-ui-mode 1)
  ;; enables mouse hover support
  (dap-tooltip-mode 1)
  ;;  use tooltips for mouse hover
  ;;  if it is not enabled dap-mode' will use the minibuffer.
  (tooltip-mode 1)
  ;;  displays floating panel with debug buttons
  ;;  requies emacs 26+
  (dap-ui-controls-mode 1)
#+END_SRC
*** company mode(already installed)
*** lsp treemacs
#+BEGIN_SRC emacs-lisp
  ;;(lsp-treemacs-sync-mode 1)
#+END_SRC
*** lsp configurations
#+BEGIN_SRC emacs-lisp
  (lsp-register-custom-settings
   '(("gopls.completeUnimported" t t)
     ("gopls.staticcheck" t t)))
#+END_SRC
*** company lsp
#+BEGIN_SRC emacs-lisp
  ;; Lsp completion
 ;; (use-package company-lsp
  ;;  :defer t
  ;;  :after lsp company
  ;;  :init
  ;;  (setq company-lsp-cache-candidates 'auto)
  ;;  :config
  ;;  (setq company-lsp-filter-candidates t))
#+END_SRC

*** GO PLS configurations
#+BEGIN_SRC emacs-lisp
  ;;(setq lsp-go-hover-kind "FullDocumentation")
#+END_SRC
** GO
*** GO Mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  (add-hook 'go-mode-hook 'go-imenu-setup)
#+END_SRC
*** GO IMenu
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'go-imenu)
    (package-refresh-contents)
    (package-install 'go-imenu))
  (add-hook 'go-mode-hook 'go-imenu-setup)
#+END_SRC
*** GO LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred lsp-format-buffer lsp-organize-imports)
    :hook (go-mode . lsp-deferred))

  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  (add-hook 'go-mode-hook #'lsp)

#+END_SRC
*** Go Configurations
*** Go Direx
#+BEGIN_SRC emacs-lisp
  ;;  go get -u github.com/jstemmer/gotags
  (use-package direx
    :ensure t)
  (global-set-key (kbd "C-x C-j") 'direx:jump-to-directory)
  ;; install go tags

  (use-package go-direx
    :ensure t)
  (define-key go-mode-map (kbd "C-x C-j") 'go-direx-pop-to-buffer)

  (use-package popwin
    :ensure t)
  (push '("^\*go-direx:" :regexp t :position right :width 0.4 :dedicated t :stick t)
        popwin:special-display-config)
#+END_SRC
*** Go fill struct
#+BEGIN_SRC emacs-lisp
;;(use-package go-fill-struct
;; :ensure t)
#+END_SRC
*** Go Generate Test
#+BEGIN_SRC emacs-lisp
     ;Installs go-gen-test which generates test functions for the selcted functions
     ;;go get -u github.com/cweill/gotests/...
  (use-package gotest
    :ensure t)
  (use-package go-gen-test
    :ensure t)
#+END_SRC
*** Go Imports
#+BEGIN_SRC emacs-lisp
  ;; (use-package go-imports
  ;; :ensure t)
  ;;(setq go-save-hook #'goimports-before-save)
#+END_SRC
*** Go Guru
#+BEGIN_SRC emacs-lisp
    ;;install go guru and go eldoc using go get and emacs package
  (use-package go-guru
    :ensure t)
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)
  ;;use-go-mode-set-scope github.com/...   to specificy package scope usually a path to your project
#+END_SRC
*** Go eldoc
#+BEGIN_SRC emacs-lisp
  ;;show function paremeters in the minibuffer
  (use-package go-eldoc
    :ensure t) ;; Don't need to require, if you install by package.el
  (add-hook 'go-mode-hook 'go-eldoc-setup)
  (set-face-attribute 'eldoc-highlight-function-argument nil
                      :underline t
                      :weight 'bold)
#+END_SRC
*** Go fill struct
#+BEGIN_SRC emacs-lisp
  (use-package go-fill-struct
  :ensure t)
#+END_SRC
*** GO debugger
#+BEGIN_SRC emacs-lisp
;;;  (use-package go-dlv
 ;; :ensure t)
#+END_SRC
*** DAP Go
#+BEGIN_SRC emacs-lisp
  (require 'dap-go)
#+END_SRC
*** Go Modify Tags
#+BEGIN_SRC emacs-lisp
  (use-package go-tag
  :ensure t)
(setq go-tag-args (list "-transform" "camelcase"))
#+END_SRC
** Treemacs
*** treemacs
#+BEGIN_SRC emacs-lisp
        ;; project-explorer installation
  (use-package treemacs
    :ensure t
    :bind ("M-p" . treemacs)
    ("M-0" . treemacs-select-window))
  (setq treemacs-icons-dired-mode nil)
  (setq treemacs-filewatch-mode t)
  (setq treemacs-indentation-string "  ")
  (setq treemacs-fringe-indicator-mode t)
  (setq treemacs-git-mode 'extended)
  (setq treemacs-show-hidden-files t)
  (setq treemacs-sorting 'alphabetic-asc)
  (setq treemacs-recenter-after-file-follow t)
  (setq split-width-threshold 0)
  (setq treemacs-position 'right)
  ;;(setq treemacs-no-png-images nil)
  (setq treemacs-width 80)
  (setq treemacs-show-hidden-files t)
  (setq treemacs-is-never-other-window nil)
  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)
  (setq-default treemacs–fringe-indicator-bitmap t)
  (setq treemacs-show-cursor nil)
  (treemacs-fringe-indicator-mode nil)
  (setq treemacs-indentation 1)
  (setq treemacs-wrap-around nil)
  ;;remove line number in treemacs
  (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
  ;;(bind-key "M-s-0"  'treemacs-quit)

  ;;(use-package treemacs-icons-dired
  ;; :after (treemacs dired)
  ;; :ensure t
  ;; :config (treemacs-icons-dired-mode))
#+END_SRC
*** treemacs icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
     :ensure t)

          ;;(setq doom-themes-treemacs-theme "doom-tomorrow-night")
          ;;(doom-themes-treemacs-config)
              ;;(all-the-icons-wicon "tornado" :face 'all-the-icons-blue)
            ;;(setq-default all-the-icons-color-icons nil)

              ;;(set-fontset-font t 'unicode (font-spec :family "Material Icons") nil 'append)
              ;;(propertize (all-the-icons-octicon "package")
               ;;           'face `(:family ,(all-the-icons-octicon-family) :height 1.2)
                ;;          'display '(raise -0.1))
            ;;(setq-default dired-mode all-the-icons-octicon "file-directory" :v-adjust 0.0 :face all-the-icons-blue)
        ;; (image-type-availabe-p 'imagemagick)
     ;;  (treemacs-resize-icons 44)
   (setq doom-themes-treemacs-enable-variable-pitch nil)
  ;; (setq-default doom-variable-pitch-font (font-spec :family "JetBrain Mono" :size 14))
  ;; (treemacs-resize-icons 44)
#+END_SRC
** Treemacs Lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-treemacs
    :ensure t
    :config
    (lsp-treemacs-sync-mode 1))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
  (global-flycheck-mode)
  ;;(package-install 'exec-path-from-shell)
  ;;(exec-path-from-shell-initialize)
#+END_SRC
** DAP Mode GO
#+BEGIN_SRC emacs-lisp
  ;; (use-package dap-mode
   ;;  :ensure t
   ;;  :init (dap-mode 1))
  ;; (add-hook 'dap-stopped-hook
  ;;          (lambda (arg) (call-interactively #'dap-hydra)))
  ;;add this in init.el
  ;;(require 'dap-go)
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
(require 'tramp)
(defvar tramp-remote-path nil)
(setq tramp-remote-path "~/src/go/bin")
(setq tramp-remote-path "/usr/local/go/bin")

(custom-set-variables  '(tramp-remote-path
    (quote
     (tramp-own-remote-path))))

;;(let ((process-environment tramp-remote-process-environment))
;;       (setenv "ENV" "$HOME/.profile")
;;       (setq tramp-remote-process-environment process-environment))

(lsp-register-client
    (make-lsp-client :new-connection (lsp-tramp-connection "gopls")
                     :major-modes '(go-mode)
                     :remote? t
                     :server-id 'gopls-remote))
#+END_SRC
** GUI Theme
*** Doom
#+BEGIN_SRC emacs-lisp
    ;;(use-package base16-theme
    ;;   :ensure t)
    ;;THE INITIALIZATION OF THIS THEME IS DONE IN THE init.el FILE
    (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-tomorrow-night t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
 ;; (setq-default doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 12))


#+END_SRC
*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
        :ensure t
        :hook (after-init . doom-modeline-mode))
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-workspace-name t)
  (setq doom-modeline-lsp t)
  (setq doom-modeline-github nil)
  (setq doom-modeline-modal-icon t)
#+END_SRC
** Make Mode
#+BEGIN_SRC emacs-lisp
(use-package make-mode
:ensure t)
#+END_SRC
** JSON Mode
#+BEGIN_SRC emacs-lisp
;;(use-package json-mode
;;  :mode "\\.json\\'")
#+END_SRC
** Yaml Mode
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Evil 
*** Evil mode
#+BEGIN_SRC emacs-lisp
  ;;set these values if using evil collection
  (setq evil-want-keybinding nil)
  (setq evil-want-integration t)

  (use-package evil
      :ensure t
      :config (evil-mode 1))

  (use-package undo-tree
      :ensure t)
  ;;(global-undo-tree-mode)

  (use-package undo-fu
      :ensure t)
  (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
  (define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)

  ;;Evil Collection
#+END_SRC
*** Evil Collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :ensure t
    :init (evil-collection-init))
#+END_SRC
** Package updater
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
     :ensure t
     :config
     (setq auto-package-update-delete-old-versions t
           auto-package-update-interval 4)
     (auto-package-update-maybe))

#+END_SRC
** Helm plugin
*** Helm
#+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
    :bind ("C-x C-b" . helm-mini)
  ("C-s-s" . helm-occur))
    ;;(global-set-key (kbd "C-x b") 'ibuffer)

#+END_SRC
*** Helm Swoop
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :ensure t)
#+END_SRC
** Project wide search ag : the silver search
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t)
#+END_SRC
** Fuzzy Search
*** Rip Grep
#+BEGIN_SRC emacs-lisp
    (use-package rg
      :ensure t
      :init (rg-enable-default-bindings))
#+END_SRC
*** snails
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'load-path "~/.emacs.d/custom/snails") 
  ;;(require 'snails)
  ;;(setq-default snails-backend-rg t)

#+END_SRC
** Git
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

 ;; (use-package github-review
 ;;   :ensure t)
;;(setq-default github-review-host "gitlab.connectwisedev.com")
#+END_SRC
*** Git Gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t)
  (global-git-gutter-mode +1)
#+END_SRC
** Python
*** Python Mode
#+BEGIN_SRC emacs-lisp
  (autoload 'python-mode "python-mode" "Python Mode." t)
  (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
  (add-to-list 'interpreter-mode-alist '("python" . python-mode))

  (use-package python-mode
    :ensure t)
  (use-package lsp-mode
    :config
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t)))
    :hook
    ((python-mode . lsp)))
  (setq elpy-rpc-python-command "python3")
  (setenv "PYTHONIOENCODING" "utf-8") (add-to-list 'process-coding-system-alist '("elpy" . (utf-8 . utf-8))) (add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8))) (add-to-list 'process-coding-system-alist '("flake8" . (utf-8 . utf-8)))
  (setq-default dap-python-executable "python3")
  (use-package lsp-ui
    :commands lsp-ui-mode)
  (setq python-shell-interpreter "/usr/local/bin/python3")
  (lsp-register-custom-settings
   '(("pyls.plugins.flake8.enabled" t t)))

  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))
#+END_SRC
*** elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))
(add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
#+END_SRC
*** Python lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp))))
#+END_SRC
*** Python DAP
#+BEGIN_SRC emacs-lisp
  (require 'dap-python)
  ;;the python exe to be used by dap and lsp
  (setq-default dap-python-executable "python3")
#+END_SRC

** exec path from shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t)
  (exec-path-from-shell-initialize)
  (setq-default exec-path-from-shell-arguments nil)
  (setq-default exec-path-from-shell t)
  (setq shell-command-switch "-ic")
  (setenv "ZSH_ENV" (expand-file-name "~/.zshrc"))
#+END_SRC

** Java
*** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :ensure t)
(add-hook 'java-mode-hook #'lsp)
#+END_SRC
*** dap
#+BEGIN_SRC emacs-lisp
 ;; (use-package dap-java :ensure t)
#+END_SRC

** Hydra
#+BEGIN_SRC emacs-lisp
  ;; (use-package hydra
  ;;   :ensure t)
  ;;   (defhydra hydra-buffer-menu (:color pink
  ;;                                :hint nil)
  ;;     "
  ;;   ^Mark^             ^Unmark^           ^Actions^          ^Search
  ;;   ^^^^^^^^-----------------------------------------------------------------
  ;;   _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
  ;;   _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
  ;;   _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
  ;;   _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
  ;;   _~_: modified
  ;;   "
  ;;     ("m" Buffer-menu-mark)
  ;;     ("u" Buffer-menu-unmark)
  ;;     ("U" Buffer-menu-backup-unmark)
  ;;     ("d" Buffer-menu-delete)
  ;;     ("D" Buffer-menu-delete-backwards)
  ;;     ("s" Buffer-menu-save)
  ;;     ("~" Buffer-menu-not-modified)
  ;;     ("x" Buffer-menu-execute)
  ;;     ("b" Buffer-menu-bury)
  ;;     ("g" revert-buffer)
  ;;     ("T" Buffer-menu-toggle-files-only)
  ;;     ("O" Buffer-menu-multi-occur :color blue)
  ;;     ("I" Buffer-menu-isearch-buffers :color blue)
  ;;     ("R" Buffer-menu-isearch-buffers-regexp :color blue)
  ;;     ("c" nil "cancel")
  ;;     ("v" Buffer-menu-select "select" :color blue)
  ;;     ("o" Buffer-menu-other-window "other-window" :color blue)
  ;;     ("q" quit-window "quit" :color blue))

  ;;   (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)
#+END_SRC

** Goto Line Preview
#+BEGIN_SRC emacs-lisp
(use-package  goto-line-preview
:ensure t)
#+END_SRC

** Fireplace
#+BEGIN_SRC emacs-lisp
  (use-package fireplace
  :ensure t)
#+END_SRC

** ZoneMode
#+BEGIN_SRC emacs-lisp
  (use-package zone
  :ensure t)
  (zone-when-idle 60)
#+END_SRC

** Hacker News
#+BEGIN_SRC emacs-lisp
  ;;(use-package hackernews
  ;;:ensure t)
#+END_SRC
